<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用python下载微信群聊所有群员头像</title>
      <link href="/2019/10/01/wechatat-group-heads-download/"/>
      <url>/2019/10/01/wechatat-group-heads-download/</url>
      
        <content type="html"><![CDATA[<h2 id="模块安装"><a href="#模块安装" class="headerlink" title="模块安装"></a>模块安装</h2><pre><code>pip install itchatpip install Pillow</code></pre><h2 id="获取微信好友头像"><a href="#获取微信好友头像" class="headerlink" title="获取微信好友头像"></a>获取微信好友头像</h2><p>本源码来源于<a href="https://github.com/znsoooo/wxAvatars" title="网址" target="_blank" rel="noopener">硫酸锌01/流水线</a>，本文提供源码有所改动<br>运行wxAvatars_1.1_chatrooms.py，输入群名（不需要完整群名包含关键字就行，建议保存群聊到通讯录），扫码登陆微信网页版（<font color="red">如果你的微信登录不了微信网页版，右上角关闭网页，无解</font>）</p><p>为了方便运行、生成好友墙，可以双击微信群聊.bat下载头像到当前目录<br><img src="%E7%99%BB%E5%BD%95.jpg" alt></p><h2 id="拼接头像"><a href="#拼接头像" class="headerlink" title="拼接头像"></a>拼接头像</h2><p>不知道从那扒下的代码了，在源代码的基础上增加了根据头像数开根号取整，拼成一个正方形，而不是所有人头像拼接。<br><img src="%E5%A4%B4%E5%83%8F.jpg" alt></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>wxAvatars_1.1_chatrooms.py</p><pre><code>import osimport sys # non_bmp_map 用到import itchatimport PIL.Image as Image# 转载请注明出处# 原文标题：微信好友头像拼接# 原文地址：https://github.com/znsoooo/wxAvatars# 原文作者：硫酸锌01/流水线non_bmp_map = dict.fromkeys(range(0x10000, sys.maxunicode + 1), 0xfffd)name = input(&#39;&#39;&#39;请输入群名群名可以不是全称只要搜索到没有歧义就行&#39;&#39;&#39;)name_chatrooms = [name]user = &#39;avatars&#39;num_all = 0all_friends = []if not os.path.exists(user):    os.makedirs(user)itchat.auto_login(hotReload=True)def log(text):    f=open(&#39;log.txt&#39;,&#39;w&#39;,encoding = &#39;utf-8&#39;)    f.write(str(text))    f.close()text = &#39;\nfriends:\n\n&#39;&#39;&#39;&#39;friends = itchat.get_friends()[0:]num_all = 0for friend in friends:    all_friends.append(friend[&quot;UserName&quot;])    &#39;&#39;&#39;&#39;&#39;&#39;    #当只是需要输出好友列表而不需要下载头像时可以注释掉此段    img = itchat.get_head_img(userName=friend[&quot;UserName&quot;])    fileImage = open(user + &quot;/&quot; + str(num_all) + &quot;.jpg&quot;,&#39;wb&#39;)    fileImage.write(img)    fileImage.close()    &#39;&#39;&#39;&#39;&#39;&#39;    text = text + str(num_all) + &quot;.jpg &quot; + friend[&quot;NickName&quot;] + &#39;\n&#39;    num_all += 1print(&#39;friends finished:&#39;, len(all_friends))&#39;&#39;&#39;for name_chatroom in name_chatrooms:    chatrooms = itchat.search_chatrooms(name_chatroom)    if chatrooms != []:        chatroom = chatrooms[0]        chatroom_id = chatroom[&#39;UserName&#39;]        try:            print(&#39;chatroom:&#39;, chatroom[&#39;NickName&#39;].translate(non_bmp_map))            text = text + &#39;\nchatroom: &#39; + chatroom[&#39;NickName&#39;] + &#39;\n\n&#39;        except:            print(&#39;chatroom name error&#39;)        print(&#39;MemberCount:&#39;, chatroom[&#39;MemberCount&#39;])        memberList = itchat.update_chatroom(chatroom_id, detailedMember=True)        chatroom = memberList        num = 0        print(len(chatroom))        for member in chatroom[&#39;MemberList&#39;]:            if member[&quot;UserName&quot;] not in all_friends:                all_friends.append(member[&quot;UserName&quot;])                &#39;&#39;&#39;&#39;&#39;&#39;                #当只是需要输出好友列表而不需要下载头像时可以注释掉此段                img = itchat.get_head_img(userName=member[&quot;UserName&quot;],chatroomUserName=chatroom_id)                fileImage = open(user + &quot;/&quot; + str(num_all) + &quot;.jpg&quot;,&#39;wb&#39;)                try:                    fileImage.write(img)                    fileImage.close()                except:                    print(&#39;img error:&#39;, member[&quot;UserName&quot;])                &#39;&#39;&#39;&#39;&#39;&#39;                text = text + str(num_all) + &quot;.jpg &quot; + member[&quot;NickName&quot;] + &#39;\n&#39;                num += 1                num_all += 1                if num &lt; 10:                    try:                        print(num, member[&quot;NickName&quot;].translate(non_bmp_map))                    except:                        print(&#39;nickname error&#39;)            else:                pass                # print(&#39;duplicate:&#39;, member[&quot;NickName&quot;].translate(non_bmp_map))    else:        print(&#39;Not found chatroom:&#39;, name_chatroom)        print(&#39;MemberCount:&#39;, 0)print(&#39;chatroom finished:&#39;, len(all_friends))log(text)</code></pre><p>cut.py</p><pre><code># -*- coding: utf-8 -*-import mathfrom PIL import Imageimport osavatar_dir = os.getcwd() + &quot;\\avatars\\&quot;def joint_avatar(path):    # 获取文件夹内头像个数    length = len(os.listdir(path))    # 设置画布大小    image_size = 2560    # 设置每个头像大小    each_size = math.ceil(2560 / math.floor(math.sqrt(length)))    # 计算所需各行列的头像数量    x_lines = int(length ** 0.5)    y_lines = int(length ** 0.5)    image = Image.new(&#39;RGB&#39;, (each_size * x_lines, each_size * y_lines))    x = 0    y = 0    for (root, dirs, files) in os.walk(path):        for pic_name in files:            # 增加头像读取不出来的异常处理                try:                    with Image.open(path + pic_name) as img:                        img = img.resize((each_size, each_size))                        image.paste(img, (x * each_size, y * each_size))                        x += 1                        if x == x_lines:                            x = 0                            y += 1                except IOError:                    print(&quot;头像读取失败&quot;)    img = image.save(os.getcwd() + &quot;/wechat.png&quot;)    print(&#39;微信好友头像拼接完成!&#39;)if __name__ == &#39;__main__&#39;:    avatar_dir = os.getcwd() + &quot;\\avatars\\&quot;    joint_avatar(avatar_dir)</code></pre><h2 id="附件下载"><a href="#附件下载" class="headerlink" title="附件下载"></a>附件下载</h2><p><a href="https://pan.baidu.com/s/1KFYjqwVC1vvzwNRV4ekLVw" title="网址" target="_blank" rel="noopener">百度云盘</a> 提取码: anxc </p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷歌浏览器插件推荐</title>
      <link href="/2019/09/23/chrome-extensions-recommend/"/>
      <url>/2019/09/23/chrome-extensions-recommend/</url>
      
        <content type="html"><![CDATA[<h2 id="InfinityNewTab"><a href="#InfinityNewTab" class="headerlink" title="InfinityNewTab"></a>InfinityNewTab</h2><p>Infinity New Tab是一款Chrome浏览器实用简洁的插件，它可以完美替代Chrome自身的新标签页、用户也可以进行各式各样的自定义编辑。<br><img src="Infinity.png" alt><br>自定义添加自己喜爱的网站在新标签页里</p><h2 id="crxmouse"><a href="#crxmouse" class="headerlink" title="crxmouse"></a>crxmouse</h2><p>只需一个鼠标手势即可实现浏览器操作！crxMouse Chrome™ 手势扩展程序为您带来触手可及的 Chrome 浏览器功能，通过解锁完全可自定义的鼠标手势、击键和鼠标快捷键来提高您的工作效率。<br><img src="crxmouse.png" alt><br>用的最多的就是关闭手势和重新打开关闭的标签页</p><h2 id="onetab"><a href="#onetab" class="headerlink" title="onetab"></a>onetab</h2><p>OneTab是Chrome的一款插件, 主要用来管理浏览器的标签页。</p><h4 id="把多个Tab转换为一个列表"><a href="#把多个Tab转换为一个列表" class="headerlink" title="把多个Tab转换为一个列表"></a>把多个Tab转换为一个列表</h4><p>当你发现自己有太多的标签页时,单击OneTab图标,所有标签页会转换成一个列表,当你需要再次访问这些标签页时,点击OneTab图标唤出列表,点击列表恢复标签页</p><ul><li><p>当前我在浏览器打开了一组标签页<br><img src="pic_001.jpg" alt></p></li><li><p>点击OneTab图标<br><img src="pic_002.jpg" alt></p></li><li><p>所有标签页以网页形式合并为列表(点击列表可恢复)<br><img src="pic_003.jpg" alt></p></li><li><p>点击恢复页面(点击恢复标签页后, 开启新的标签页)<br><img src="pic_004.jpg" alt><br>如果关闭了OneTab标签页, 只需点击浏览器插件栏OneTab图标恢复即可!</p></li></ul><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>由于众所周知的原因，无法访问谷歌，无法下载插件。<br>所以我将插件打包了，供大家下载安装。<br><a href="https://pan.baidu.com/s/1nvOeUfuSEjTwfcELMpLtoQ" title="网址" target="_blank" rel="noopener">百度云盘</a> 提取码: au58 </p><ul><li><p>打开chrome，在『设置-扩展程序』里打开开发者模式<br><img src="extensions.png" alt></p></li><li><p>下载插件重命名后缀为zip，解压到文件夹里（选择解压文件），在扩展程序界面点击“加载已解压的扩展程序”，选择刚在解压到的文件夹<br><img src="installer.png" alt></p></li><li><p>一般安装完成后都有使用指引，按照指引学习如何操作吧</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> chrome插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
